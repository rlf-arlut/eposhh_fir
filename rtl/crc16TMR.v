// SPDX-FileCopyrightText: 2023 Board of Regents, The University of Texas System
// SPDX-FileAttributionText: <text>This software was developed with government support under Grant no. DE-SC0023055 awarded by the Department of Energy. The government has certain rights in the copyright.</text>
//
// SPDX-License-Identifier: BSD-3-Clause

/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./crc16TMR.v                                                                           *
 *                                                                                                  *
 * user    : rfriesen                                                                               *
 * host    : sgl-lap054                                                                             *
 * date    : 08/09/2023 15:12:47                                                                    *
 *                                                                                                  *
 * workdir : /home/rfriesen/git/eposhh_fir5tap/rtl                                                  *
 * cmd     : /home/rfriesen/git/tmrg/bin/tmrg --log=fir_top_i2c-tmr.log --generate-report --stats -v -c *
 *           fir_top_i2c_tmr.cnf fir_top_i2c_tmr.v mult_reg.v snapshot_tx.v i2c_target_wbc.v        *
 *           i2c_target.v adder_tree10.v crc16.v                                                    *
 * tmrg rev: 6574161d3b316703ff7c8948d3a894c6005f77d4                                               *
 *                                                                                                  *
 * src file: crc16.v                                                                                *
 *           Git SHA           : 0ff2f60e67f53627c21a57a2c49e20cd48629ae9                           *
 *           Modification time : 2023-08-25 10:03:13.443277                                         *
 *           File Size         : 2343                                                               *
 *           MD5 hash          : 6e75f99c63d265e224e7b4b69c56132f                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`ifndef  CRC16_V_
`define  CRC16_V_
module crc16TMR(
  input [15:0] crcInA ,
  input [15:0] crcInB ,
  input [15:0] crcInC ,
  input [7:0] dataA ,
  input [7:0] dataB ,
  input [7:0] dataC ,
  output [15:0] crcOutA ,
  output [15:0] crcOutB ,
  output [15:0] crcOutC 
);
assign crcOutA[0]  =  (crcInA[0] ^crcInA[1] ^crcInA[2] ^crcInA[3] ^crcInA[4] ^crcInA[5] ^crcInA[6] ^crcInA[7] ^crcInA[8] ^dataA[0] ^dataA[1] ^dataA[2] ^dataA[3] ^dataA[4] ^dataA[5] ^dataA[6] ^dataA[7] );
assign crcOutB[0]  =  (crcInB[0] ^crcInB[1] ^crcInB[2] ^crcInB[3] ^crcInB[4] ^crcInB[5] ^crcInB[6] ^crcInB[7] ^crcInB[8] ^dataB[0] ^dataB[1] ^dataB[2] ^dataB[3] ^dataB[4] ^dataB[5] ^dataB[6] ^dataB[7] );
assign crcOutC[0]  =  (crcInC[0] ^crcInC[1] ^crcInC[2] ^crcInC[3] ^crcInC[4] ^crcInC[5] ^crcInC[6] ^crcInC[7] ^crcInC[8] ^dataC[0] ^dataC[1] ^dataC[2] ^dataC[3] ^dataC[4] ^dataC[5] ^dataC[6] ^dataC[7] );
assign crcOutA[1]  =  (crcInA[9] );
assign crcOutB[1]  =  (crcInB[9] );
assign crcOutC[1]  =  (crcInC[9] );
assign crcOutA[2]  =  (crcInA[10] );
assign crcOutB[2]  =  (crcInB[10] );
assign crcOutC[2]  =  (crcInC[10] );
assign crcOutA[3]  =  (crcInA[11] );
assign crcOutB[3]  =  (crcInB[11] );
assign crcOutC[3]  =  (crcInC[11] );
assign crcOutA[4]  =  (crcInA[12] );
assign crcOutB[4]  =  (crcInB[12] );
assign crcOutC[4]  =  (crcInC[12] );
assign crcOutA[5]  =  (crcInA[13] );
assign crcOutB[5]  =  (crcInB[13] );
assign crcOutC[5]  =  (crcInC[13] );
assign crcOutA[6]  =  (crcInA[0] ^crcInA[14] ^dataA[0] );
assign crcOutB[6]  =  (crcInB[0] ^crcInB[14] ^dataB[0] );
assign crcOutC[6]  =  (crcInC[0] ^crcInC[14] ^dataC[0] );
assign crcOutA[7]  =  (crcInA[0] ^crcInA[1] ^crcInA[15] ^dataA[0] ^dataA[1] );
assign crcOutB[7]  =  (crcInB[0] ^crcInB[1] ^crcInB[15] ^dataB[0] ^dataB[1] );
assign crcOutC[7]  =  (crcInC[0] ^crcInC[1] ^crcInC[15] ^dataC[0] ^dataC[1] );
assign crcOutA[8]  =  (crcInA[1] ^crcInA[2] ^dataA[1] ^dataA[2] );
assign crcOutB[8]  =  (crcInB[1] ^crcInB[2] ^dataB[1] ^dataB[2] );
assign crcOutC[8]  =  (crcInC[1] ^crcInC[2] ^dataC[1] ^dataC[2] );
assign crcOutA[9]  =  (crcInA[2] ^crcInA[3] ^dataA[2] ^dataA[3] );
assign crcOutB[9]  =  (crcInB[2] ^crcInB[3] ^dataB[2] ^dataB[3] );
assign crcOutC[9]  =  (crcInC[2] ^crcInC[3] ^dataC[2] ^dataC[3] );
assign crcOutA[10]  =  (crcInA[3] ^crcInA[4] ^dataA[3] ^dataA[4] );
assign crcOutB[10]  =  (crcInB[3] ^crcInB[4] ^dataB[3] ^dataB[4] );
assign crcOutC[10]  =  (crcInC[3] ^crcInC[4] ^dataC[3] ^dataC[4] );
assign crcOutA[11]  =  (crcInA[4] ^crcInA[5] ^dataA[4] ^dataA[5] );
assign crcOutB[11]  =  (crcInB[4] ^crcInB[5] ^dataB[4] ^dataB[5] );
assign crcOutC[11]  =  (crcInC[4] ^crcInC[5] ^dataC[4] ^dataC[5] );
assign crcOutA[12]  =  (crcInA[5] ^crcInA[6] ^dataA[5] ^dataA[6] );
assign crcOutB[12]  =  (crcInB[5] ^crcInB[6] ^dataB[5] ^dataB[6] );
assign crcOutC[12]  =  (crcInC[5] ^crcInC[6] ^dataC[5] ^dataC[6] );
assign crcOutA[13]  =  (crcInA[6] ^crcInA[7] ^dataA[6] ^dataA[7] );
assign crcOutB[13]  =  (crcInB[6] ^crcInB[7] ^dataB[6] ^dataB[7] );
assign crcOutC[13]  =  (crcInC[6] ^crcInC[7] ^dataC[6] ^dataC[7] );
assign crcOutA[14]  =  (crcInA[0] ^crcInA[1] ^crcInA[2] ^crcInA[3] ^crcInA[4] ^crcInA[5] ^crcInA[6] ^dataA[0] ^dataA[1] ^dataA[2] ^dataA[3] ^dataA[4] ^dataA[5] ^dataA[6] );
assign crcOutB[14]  =  (crcInB[0] ^crcInB[1] ^crcInB[2] ^crcInB[3] ^crcInB[4] ^crcInB[5] ^crcInB[6] ^dataB[0] ^dataB[1] ^dataB[2] ^dataB[3] ^dataB[4] ^dataB[5] ^dataB[6] );
assign crcOutC[14]  =  (crcInC[0] ^crcInC[1] ^crcInC[2] ^crcInC[3] ^crcInC[4] ^crcInC[5] ^crcInC[6] ^dataC[0] ^dataC[1] ^dataC[2] ^dataC[3] ^dataC[4] ^dataC[5] ^dataC[6] );
assign crcOutA[15]  =  (crcInA[0] ^crcInA[1] ^crcInA[2] ^crcInA[3] ^crcInA[4] ^crcInA[5] ^crcInA[6] ^crcInA[7] ^dataA[0] ^dataA[1] ^dataA[2] ^dataA[3] ^dataA[4] ^dataA[5] ^dataA[6] ^dataA[7] );
assign crcOutB[15]  =  (crcInB[0] ^crcInB[1] ^crcInB[2] ^crcInB[3] ^crcInB[4] ^crcInB[5] ^crcInB[6] ^crcInB[7] ^dataB[0] ^dataB[1] ^dataB[2] ^dataB[3] ^dataB[4] ^dataB[5] ^dataB[6] ^dataB[7] );
assign crcOutC[15]  =  (crcInC[0] ^crcInC[1] ^crcInC[2] ^crcInC[3] ^crcInC[4] ^crcInC[5] ^crcInC[6] ^crcInC[7] ^dataC[0] ^dataC[1] ^dataC[2] ^dataC[3] ^dataC[4] ^dataC[5] ^dataC[6] ^dataC[7] );
endmodule

`endif  
